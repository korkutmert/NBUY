// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OzelDersYerim.Data.Concrete.EfCore.Context;

#nullable disable

namespace OzelDersYerim.Data.Migrations
{
    [DbContext(typeof(OzelDersYerimContext))]
    partial class OzelDersYerimContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OzelDersYerim.Entity.Concrete.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Branches", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchName = "Matematik",
                            ImageUrl = "mat.png",
                            Url = "matematik"
                        },
                        new
                        {
                            Id = 2,
                            BranchName = "Kimya",
                            ImageUrl = "kimya.png",
                            Url = "kimya"
                        },
                        new
                        {
                            Id = 3,
                            BranchName = "İngilizce",
                            ImageUrl = "ing.png",
                            Url = "ingilizce"
                        },
                        new
                        {
                            Id = 4,
                            BranchName = "Müzik",
                            ImageUrl = "müzik.png",
                            Url = "muzik"
                        },
                        new
                        {
                            Id = 5,
                            BranchName = "Türkçe",
                            ImageUrl = "turkce.png",
                            Url = "turkce"
                        },
                        new
                        {
                            Id = 6,
                            BranchName = "Bilgisayar",
                            ImageUrl = "bilgisayar.png",
                            Url = "bilgisayar"
                        });
                });

            modelBuilder.Entity("OzelDersYerim.Entity.Concrete.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5aa42dea-90ce-4342-b3d4-a34d9483e736",
                            Description = "Admin rolü",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "5e983d61-be70-494a-9077-f78bf14aaf3e",
                            Description = "Student rolü",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "9388f291-fa5d-4666-81fd-f07c4f3c04f2",
                            Description = "Teacher rolü",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("OzelDersYerim.Entity.Concrete.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("About")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Age")
                        .HasColumnType("TEXT");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Experince")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("PricePerHour")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6ed224a5-9bac-4d41-8e55-27012b310ad0",
                            About = "Mimar Sinan Güzel Sanatlar Üniversitesi Konservatuar mezunuyum. Uzmanlık alanım Piyano olamakla beraber keman ve gitar dersleri de vermekteyim.",
                            AccessFailedCount = 0,
                            Age = "39",
                            BranchId = 4,
                            ConcurrencyStamp = "ddae22fe-a25e-4e17-9cd8-ae62cc87e081",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            Experince = "15",
                            FirstName = "Ahmet",
                            Gender = "Erkek",
                            ImageUrl = "10.png",
                            LastName = "Yılmaz",
                            Location = "Beşiktaş",
                            LockoutEnabled = false,
                            Phone = "05550005500",
                            PhoneNumberConfirmed = false,
                            PricePerHour = 450m,
                            SecurityStamp = "ef741240-8d67-496c-9d7d-b5c5312178ca",
                            TwoFactorEnabled = false,
                            Url = "ogretmen-ahmet-yilmaz"
                        },
                        new
                        {
                            Id = "3e07e45d-525c-4921-aa77-1fec52174254",
                            About = "İngilizce Öğretmeniyim. Her türlü İngilizce sınavlarına hazırlık konusunda ders vermekteyim.",
                            AccessFailedCount = 0,
                            Age = "27",
                            BranchId = 3,
                            ConcurrencyStamp = "f4085d21-725f-4e9b-97e0-ae686c8cc4c6",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            Experince = "5",
                            FirstName = "Arzu",
                            Gender = "Kadın",
                            ImageUrl = "11.png",
                            LastName = "Doğramacı",
                            Location = "Şişli",
                            LockoutEnabled = false,
                            Phone = "05550005501",
                            PhoneNumberConfirmed = false,
                            PricePerHour = 300m,
                            SecurityStamp = "8936dba1-3fb5-4a10-a018-edd7f73bdf6e",
                            TwoFactorEnabled = false,
                            Url = "ogretmen-arzu-dogramaci"
                        },
                        new
                        {
                            Id = "788a925d-56bc-48b6-802e-04d4ad06a3ec",
                            About = "İlköğretim-lise düzeyinde matematik dersleri verilir. Sınavlar için fazladan etüt alabilirsiniz.",
                            AccessFailedCount = 0,
                            Age = "42",
                            BranchId = 1,
                            ConcurrencyStamp = "2115301b-5406-4f4e-9946-f50fc6db5c52",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            Experince = "",
                            FirstName = "Serdar",
                            Gender = "Erkek",
                            ImageUrl = "12.png",
                            LastName = "Kulbilge",
                            Location = "Aksaray",
                            LockoutEnabled = false,
                            Phone = "05550005502",
                            PhoneNumberConfirmed = false,
                            PricePerHour = 250m,
                            SecurityStamp = "d810fc1d-510c-4ccc-9a6f-8588f1edc7f7",
                            TwoFactorEnabled = false,
                            Url = "ogretmen-serdar-kulbilge"
                        },
                        new
                        {
                            Id = "e6c62ebe-8830-492c-84e4-f24a2e1d00d1",
                            About = "Boğaziçi Üniversitesi Mezunuyum. 28 yaşındayım. Özel bir lisede Kimya Öğretmenliği yapıyorum.",
                            AccessFailedCount = 0,
                            Age = "28",
                            BranchId = 2,
                            ConcurrencyStamp = "1293753d-ff60-49a8-a9ad-90c482839cac",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            Experince = "6",
                            FirstName = "Hande",
                            Gender = "Kadın",
                            ImageUrl = "13.png",
                            LastName = "Yıldırım",
                            Location = "Etiler",
                            LockoutEnabled = false,
                            Phone = "05550005503",
                            PhoneNumberConfirmed = false,
                            PricePerHour = 300m,
                            SecurityStamp = "d343fbec-e15b-444c-958c-3b08a3316359",
                            TwoFactorEnabled = false,
                            Url = "ogretmen-hande-yildirim"
                        });
                });

            modelBuilder.Entity("OzelDersYerim.Entity.Concrete.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Students", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "24 Yaşındayım.Yazılım eğitimi alıyorum.Yeni programlama dilleri üzerinde kendimi geliştirmek ve ders almak istiyorum.",
                            Age = "24",
                            FirstName = "Mert Korkut",
                            ImageUrl = "1.png",
                            LastName = "Muslu",
                            Url = "ogrenci-mert-korkut-muslu"
                        },
                        new
                        {
                            Id = 2,
                            About = "24 Yaşındayım.Elektirk-elektronik mühendisiyim ancak şu sıralar yazılım eğitimi alıyorum.Kendimi bu alanda geliştirmek istiyorum.",
                            Age = "28",
                            FirstName = "Cemre ",
                            ImageUrl = "2.png",
                            LastName = "Şenel",
                            Url = "ogrenci-cemre-senel"
                        },
                        new
                        {
                            Id = 3,
                            About = "Kendimi her alanda gelişime açık hissediyorum. Back-end developer alanında çalışmak istediğim içinde özellikle bu alanda kendime birşeyler katmak istiyorum.",
                            Age = "23",
                            FirstName = "Harun ",
                            ImageUrl = "3.png",
                            LastName = "Özer",
                            Url = "ogrenci-harun-ozer"
                        },
                        new
                        {
                            Id = 4,
                            About = "Yeni mezun bir sağlıkçı olarak Kpss sınavlarına hazırlanmak için matematik dersleri almak istiyorum.",
                            Age = "20",
                            FirstName = "Senem",
                            ImageUrl = "4.png",
                            LastName = "Öztürk",
                            Url = "ogrenci-senem-ozturk"
                        },
                        new
                        {
                            Id = 5,
                            About = "Matematik derslerinde çok zorlanıyorum.",
                            Age = "14",
                            FirstName = "Zeynep",
                            ImageUrl = "5.png",
                            LastName = "Aslan",
                            Url = "ogrenci-zeynep-aslan"
                        },
                        new
                        {
                            Id = 6,
                            About = "Merhaba.Herhangi bir müzik aleti çalmayı öğrenmek için buradayım !.",
                            Age = "22",
                            FirstName = "Kemal Emre",
                            ImageUrl = "6.png",
                            LastName = "Erol",
                            Url = "ogrenci-kemal-emre-erol"
                        },
                        new
                        {
                            Id = 7,
                            About = "Lise öğrencisiyim.Üniversite sınavları için Kimya dersleri almak istiyorum.",
                            Age = "17",
                            FirstName = "Aslı",
                            ImageUrl = "7.png",
                            LastName = "Yıldız",
                            Url = "ogrenci-asli-yildiz"
                        });
                });

            modelBuilder.Entity("OzelDersYerim.Entity.Concrete.StudentTeacher", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.HasKey("StudentId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("StudentTeachers", (string)null);

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            TeacherId = 1
                        },
                        new
                        {
                            StudentId = 1,
                            TeacherId = 2
                        },
                        new
                        {
                            StudentId = 2,
                            TeacherId = 1
                        },
                        new
                        {
                            StudentId = 2,
                            TeacherId = 3
                        },
                        new
                        {
                            StudentId = 3,
                            TeacherId = 3
                        },
                        new
                        {
                            StudentId = 3,
                            TeacherId = 4
                        },
                        new
                        {
                            StudentId = 4,
                            TeacherId = 5
                        },
                        new
                        {
                            StudentId = 5,
                            TeacherId = 6
                        },
                        new
                        {
                            StudentId = 6,
                            TeacherId = 1
                        },
                        new
                        {
                            StudentId = 7,
                            TeacherId = 2
                        },
                        new
                        {
                            StudentId = 7,
                            TeacherId = 7
                        });
                });

            modelBuilder.Entity("OzelDersYerim.Entity.Concrete.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Experince")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasMaxLength(11)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("PricePerHour")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Teachers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Mimar Sinan Güzel Sanatlar Üniversitesi Konservatuar mezunuyum. Uzmanlık alanım Piyano olamakla beraber keman ve gitar dersleri de vermekteyim.",
                            Age = "39",
                            BranchId = 4,
                            Experince = "15",
                            FirstName = "Ahmet",
                            Gender = "Erkek",
                            ImageUrl = "10.png",
                            LastName = "Yılmaz",
                            Location = "Beşiktaş",
                            Phone = "05550005500",
                            PricePerHour = 450m,
                            Url = "ogretmen-ahmet-yilmaz"
                        },
                        new
                        {
                            Id = 2,
                            About = "İngilizce Öğretmeniyim. Her türlü İngilizce sınavlarına hazırlık konusunda ders vermekteyim.",
                            Age = "27",
                            BranchId = 3,
                            Experince = "5",
                            FirstName = "Arzu",
                            Gender = "Kadın",
                            ImageUrl = "11.png",
                            LastName = "Doğramacı",
                            Location = "Şişli",
                            Phone = "05550005501",
                            PricePerHour = 300m,
                            Url = "ogretmen-arzu-dogramaci"
                        },
                        new
                        {
                            Id = 3,
                            About = "İlköğretim-lise düzeyinde matematik dersleri verilir. Sınavlar için fazladan etüt alabilirsiniz.",
                            Age = "42",
                            BranchId = 1,
                            Experince = "",
                            FirstName = "Serdar",
                            Gender = "Erkek",
                            ImageUrl = "12.png",
                            LastName = "Kulbilge",
                            Location = "Aksaray",
                            Phone = "05550005502",
                            PricePerHour = 250m,
                            Url = "ogretmen-serdar-kulbilge"
                        },
                        new
                        {
                            Id = 4,
                            About = "Boğaziçi Üniversitesi Mezunuyum. 28 yaşındayım. Özel bir lisede Kimya Öğretmenliği yapıyorum.",
                            Age = "28",
                            BranchId = 2,
                            Experince = "6",
                            FirstName = "Hande",
                            Gender = "Kadın",
                            ImageUrl = "13.png",
                            LastName = "Yıldırım",
                            Location = "Etiler",
                            Phone = "05550005503",
                            PricePerHour = 300m,
                            Url = "ogretmen-hande-yildirim"
                        },
                        new
                        {
                            Id = 5,
                            About = "Samsun 19 Mayıs Universitesi Matematik Bölümü mezunuyum. Aynı zamanda Elektro Gitar dersleri vermekteyim.",
                            Age = "30",
                            BranchId = 4,
                            Experince = "7",
                            FirstName = "Burak",
                            Gender = "Erkek",
                            ImageUrl = "14.png",
                            LastName = "Yılmaz",
                            Location = "Mecidiyeköy",
                            Phone = "05550005504",
                            PricePerHour = 400m,
                            Url = "ogretmen-burak-yilmaz"
                        },
                        new
                        {
                            Id = 6,
                            About = "Türk Dili Ve Edebiyatı, Türkçe, Dil Anlatım gibi dersler uzmanlık alanım olup, her türlü sınav için ders veriyorum.",
                            Age = "29",
                            BranchId = 5,
                            Experince = "7",
                            FirstName = "Hasan Can",
                            Gender = "Erkek",
                            ImageUrl = "15.png",
                            LastName = "Güzel",
                            Location = "Beşiktaş",
                            Phone = "05550005505",
                            PricePerHour = 200m,
                            Url = "ogretmen-hasan-can-guzel"
                        },
                        new
                        {
                            Id = 7,
                            About = "Back-End ve Front-End development konularında A'dan Z'ye eğitim vermekteyim. Sektörde Senior Developer olarak çalıştım.",
                            Age = "42",
                            BranchId = 6,
                            Experince = "21",
                            FirstName = "Hakkı ",
                            Gender = "Erkek",
                            ImageUrl = "16.png",
                            LastName = "Sarıca",
                            Location = "Esenler",
                            Phone = "05550005505",
                            PricePerHour = 700m,
                            Url = "ogretmen-hakki-sarica"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("OzelDersYerim.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OzelDersYerim.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OzelDersYerim.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("OzelDersYerim.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelDersYerim.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OzelDersYerim.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OzelDersYerim.Entity.Concrete.Identity.User", b =>
                {
                    b.HasOne("OzelDersYerim.Entity.Concrete.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("OzelDersYerim.Entity.Concrete.StudentTeacher", b =>
                {
                    b.HasOne("OzelDersYerim.Entity.Concrete.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelDersYerim.Entity.Concrete.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("OzelDersYerim.Entity.Concrete.Teacher", b =>
                {
                    b.HasOne("OzelDersYerim.Entity.Concrete.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });
#pragma warning restore 612, 618
        }
    }
}
