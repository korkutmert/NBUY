														--SHOPPINGAPP VİSUAL STUDIO AŞAMALARI--
 
 1- Business , Data , Entity ve Web katmanları oluşturuldu. Web katmanı MVC olacak şekilde ayarlandı.
 2- Proje klasöründeki dependecies bölümünden referanslar verildi
 3- Entity Katmanında Abstract ve Concrete klasörleri oluşturuldu.
 4- Abstarct da Interfaceler olacak. BaseEntitiy oluşturuldu.
 5- Concerete de ShoppingApp uygulamasında kullanılacak olan product, category gibi classlarımız tanımlandı içlerinde propertyler yazdılı. Ortak olan özellikler EntityBaseden miras alındı. 
 6- Aynı klasörün içine birde Prodcut ve categorylerin ortak tabloda yer alacağı için PrductCategory adında bir class daha yapıldı.
 7-Data KAtmanında Abstract Concrete ve Config klasörleri oluşturuldu.
 8- Config  = mapping olarak da geçtiği için bu sefer böyle verdik.
 9- Concrete -> EfCore -> Contexts ->  ==> Burda ShopAppContext Yer Alacak ?
					   -> Repositories
 
 10- DATA katmanaına hangi sql sunucusyla çalışıcalksa onun paketleri yuklenir. Sqlite için Microsoft.EntityFrameworkCore.Sqlite ve Microsoft.EntityFrameworkCore.Design Paketleri Yüklendi
 11- ShoppAppContext i DbContext'ten miras aldırıdık. Ve içine gerekli kodları yazdık. (Dbset, override onconfig, override onmodelcreat vb. gibi)
 12- Config klasöründe CategoryConfig classıı  oluşturuduk
 13-Bu classımızı IEntityTypeConfiguration<Category> generic yapsııyla configüre için özel oluşturulmuş ınterfaceden miras adlırıp implemente ettik.
 14- Sonra içinde Category 'nin propetylerine ayarlar veriyoruz yani id yi builder.HasKey(c=> c.Id) komutuyla primary key yapmak gibi ve (kodu incele!). Veritabanı için ilk katogrileri de burda oluştruduk
 15- Yİne Configin içinde ProductConfig classı oluşturduk ve üstteki işlemleri yaptık.
 
 16 -*-*-*- CONFİG Klasöri içinde CategoryConfig ve ProductConfigde Veritabanı ekleme İşlemleri yapıldı -*-*-*-*
 
 17- Config klasöründe ProductCategoryConfig classı oluşturup hangi product hangi category de onu belirleyeceğiz.
 18- ShopAppContexe geri gidip configurationları uyguluyoruz. (modelBuilder.ApplyConfiguration)
 19- Data katmanına gidip migrationslarımızı oluşturuyoruz ( dotnet ef migrations add InitialDb --startup-project ../ShoppingApp.Web) startup projeyi de belirtlelim.
 20- Daha sonra aynı komutu update ederek veriyoruz. (  dotnet ef database update --startup-project ../ShoppingApp.Web) Yine startup projem,zde update ediyoruz.
 

 21- Repositoryleri hazrılamak için Önce DATA katmanında  'abstract' klasöründe IRepository adında temel repository ınterfaceini hazırlıyoruz. IProductRepo ve ICategoryRepo bundan miras alcak
 22- İçinde CRUD işlemleri için metotlar yazılıyor.   
 
 23- DATA katmanında  'abstract' klasöründe IProductRepostiry oluşturuldu IRepository ' den IRepository<Product> şeklinde miras aldı.
 24- DATA katmanında  'concrete' klasöründen reposiories klasörne ulaıp EfCoreCategoryRepository , EfCoreProductRepository ve EfCoreGenericRepository oluşturudk (class) ve miras aldılar Irepositoryden!!
 25- EfCoreGenericRepository de Dependency Injection yaptık dışardan gelen contexi öyle aldık.
 
 26- Şimdi ise EfCoreGenericRepository deki metotlarımızın içlerini dolduruyoruz.
 
 27-EfCoreCategoryRepository nin içini dolduruyoruz.  EfCoreGenericRepository<Category> şeklinde ve ICategoryRepositoryden miras adlırıp kulladnırıyoruz.
 28-EfCoreProductRepository nin içini dolduruyoruz.  EfCoreGenericRepository<Product> şeklinde ve IProductRepostiry' den miras adlırıp kulladnırıyoruz.
 
 29- DATA katmanında abstract klasöründe IUnitOfWork ınterfaceini oluşturuyoruz. ve IDisposible ' dan miras aldırıyoruz.
 30-DATA katmanında concrete klasörünün içinde UnitOfWork classı oluşturup IUnitOfWork'ten miras aldırıyruz. Dependency Injection yapıyoruz. ve içini dolduruyoruz.
  
  
 31- BUSINESS katmanında abstract ve concrete oluşturduk
 32- Business -> abstract -> ICategoryService oluşturduk.
 33- Business -> abstract -> IProductService oluşturduk.
 34-Şimdi bunların içlerini doldurmak için Concrete klasöründe classlarınızı oluşturacağız.
 
 35- Business -> concrete -> CategoryManager (class) oluşturduk. 
 36- Business -> concrete -> ProductManager (class) oluşturduk.   
 
 37-  üstteki iki satır için ; kendi servicelerinden miras alıp içleri doldururulur.
 
 -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-
 38- WEB katmanına git ve temizlik yap
 39- WEB katmanında Program.cs de builder.services leri ekle
 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
 40- Home controller'a git ve productManager lazım olduğu için ve biz bir üstte dedğim gibi ekledğimiz serviceslerde söyledğimiz gibi IProductService diyince ProdcutManager anla dedğimiz için koda bakınca göreceğimiz gibi dependecyInjection yaparak aldık.
 !!!!?????********TASK demek asenkron yapıda işlemcinin parça parça çalışmasını temsil eder. Yani asenkron yapılarda bu kullanılır.!!!!!!!!*******
 
 
 41- HomeController daki indexin içinde GetAllAsync ile geri Product listesi döneceği için  önce onları boş bir productDtos listesi oluşturup sonra products olarak oluşturuduğumuz listedeki elemanları <foreach döngüsü içinde  '''productDtos.Add(new ProductDto{buraya dönüşecekler yazıldı})'''' komutuyla productstan ProductDto ya dönüştürüdk ve Home indexte modele @model List<ProductDto> dedik
 
 42- WEB katmanındaki models klasörünün içinde DTOS klasötü oluştur.
 43- DTOS klasöürünün içine productları listelemek için kullancağımız 'ProductDto' classımızı oluşturduk. ve içini dolduruduk.
 --------->> (İZLE)   https://app.patika.dev/courses/net-core/2-viewmodel-ve-dto-kavrami#:~:text=DTO%20(Data%20Transfer%20Object)&text=View%20model%20son%20kullan%C4%B1c%C4%B1ya%20g%C3%B6sterilecek,gelen%20veriyi%20source%20olarak%20kullan%C4%B1r.----------------
 
 
 44- 41.Adımdan sonra indexe geldik ve ProductDto daki bilgilerimizi ekrana yazdırdık. Bunu şimdilik geçici olarak ındex actionında yapıyoruz değişecek.
 
 45- ----
 46- _ProductPartial da resimler eklendi ve para birimi ve tarihin formatları düzeltildi. Görselleştirme yapıldı.(İncele, sepete ekle butonu vs.)
 47-Indexte row col yapıları oluşturup sol tarafta kategorilerin listeneleceği bölümü ayalradık.
 48- WEB katmanında Views Component  klasörü oluşturduk
 49- Views -> Shared -> components-> category-> default.cshtml oluşturuduk
 50---
 
 51- Kategorilere product gelecek metotlar yazılıyor shopContoroller olulturuldu
 
 
 ---
 
 
 
 09-12--
 
 Admin Panelinde Category bölümüünde Yeni kategori ekleme butonunu hazırlama
 
 - Index.cshtml e gelip yeni kategori ekle butonunu button dan a ' ya çevirip asp lerini veriyoruz.
 Örn :  asp-area="Admin"  asp-controller="Category" asp-action="Create" dedik Create actionunu oluşturacağız. burda 
 verdiğimiz bilgiler şu demek -> benimsitem.com/Admin/Category/Create bunu hrefle de yapabilirdik ama bu yol daha verimli.
 
 -- Create actionunu CategoryControllerda oluşturduk. Ancak HttpGet yaparak oluşturuduk. 
 -- Add view diyerek viewsini Create.cshtml olarak oluşturuyoruz.
 -- Admin -> Models -> Dtos un içinde CategoryAddDto oluşturduk. Çünkü;
 Create.cshtm de yazacağımız bilgilerden yeni kategoeri oluştururken name ve descp. bilgileri yeni bilgi olarak gitsin iye onun üzerinden göndereceğiz.
 -- Create.cshmtl içinde @model CategoryAddDto olrak veriyoruz. bir üstte söyledğim gibi.
 Daha sonra bir ekleme formu oluşturacağımız için <form> verip asplerini yazıyoruz.
 Forma bootstraptan yayralrnıp form görüntüsü verdik.
 Labelin içine asp-for ="Name" verdik ve CategoryAddDto'ya gidip name propertysine display ve validation özellikleri verdik.
 İnputa da asp-for : name verdik. Bu yapılanlar Name bilgisi içindi aynısını Description içinde yaptık.
 
 CategoryControllere gidip Create metodunun Post halini oluşturduk ve ;
	 [HttpPost]
        public async Task<IActionResult> Create(CategoryAddDto categoryAddDto) parantez içinde Create.html de model olrak 
			CategoryAddDto verdiğimiz için burda da onu karşılıyor.
				formun içinde verdiğimiz asp-for ' lar Name ve Description ile eşleşip geliyor.
			Yine create'in post halinde categoryService.CreateAsync() yapacağız ama categoryAddDto tipinde olmak zorunda ve bunu yollayamadığımızdan dolayı
					bunun için category adında değişken oluşturup içindekileri ona atıyoruz ve category tipinde yolluyoruz artık category nin içinde de categoryAdd tipinde veriler var!.
	
	Solutions dosyasında ShoppingApp.Core katmanı oluşturuyoruz. 
	İçinde özel işlerin yapılcağı Jobs classı oluturuldu ve sürekli newlenememsi için Static yapıldı.
		Yani gelen urlleri özelleştirmek için InitUrl metodu hazrılayıruz. boşlukları silme vb. gibi
WEB katmanında CORE katmanını kullanacağım için referans verdik.
	Sonra category controller'a geri dönüp Url bilgisine Jobs.InitUrl(categoryAddDto.Name) yazdık. bir üstte hazırladığımız metodu gelen Name'e vermiş olduk.
	
                
	Kayıt yatıktan sonra tekrar aynı sayfaya gitmek istedğimiz için  return RedirectToAction("Index"); yazdık.
	
	Şmdi Düzenle ve Sil butonları için asp düzenlemeelri yapıldı ve action oluşturulacak CategoryController' da.
	Dzüenle butonuna verdiğimiz asp-route-id="@category.Id" komutu bu butona tıkladığımızda o tıkladğımız categorynin bilgilerini göndermesi için hazırlandı.
	Daha sonra Düzenle butonu içinde CategoryUpdateDto oluşturudk. Ve içie AddDto dan farklı Url ve Id(ıd ye göre harket edecek) bilgisi ekledik
	
	CategoryAddDto daki işlemlerin aynısnı yaptık.
	
	
	
	
	
		
 
----12-12-------

Bir formda , resim sunucuya upload edilmek isteniyorsa ilgili forma gidip enctype="multipart/form-data" özelliği altif edilmelidir.

CORE katmanında jobs un içinde resim upload etmek için kodlar yazıldı.

 Path komutuyla randomname ler oluşturuyoruz. Siteye yüklenen resmin daha önce aynı isimde olma ihtimali olduğu için random olarak kendisine verdiriyouz.
  
  extension : Eklenen resmin uzantısını alır Örn : .png
  
  guide : Random retilenle .png kısmını yan yana ekler yani birleştirir.
 
 
 
 
 
 
 14-12---
 
 Ürün eklerken bir hata oluştuğunda hatayı bize veriyor ancak resim gidiyor. Her defasında resim seçmek zorunda kalıyoruz bunu düzelteceğiz;
 
 
 LAyotulara ve _validationScriptsPArtiallara jquery nin ------jquery-validation-unobtrusive--- ve ---jquery-validate--- eklendi Birde jquery nin normal cdn i eklendi.
 Daha sonra Productın Edit kısmında Dosya ekleme kısmına gelip bir label ekliyoruz. for diyip içine resim eklemek için kullanılan inputun Id'sini vererek onun gibi davranmasını sağlıyoruz.
 Sonr asayfnın en altına inip script kodları yazıyoruz.
 
   İmg file label ve inputumuza verdiimiz Id leri   const imgUrl = document.getElementById('img-url');  şeklinde değişkenlere atıyoruz.
   
   ProductUpdateDto ' da ImageFıledaki required özelliğini kaldırıdk. Çünkü Edit dediğimizde zaten içinde resim var olarak geliyor.
   
    ProdcutController 99. satır => required 'ı kaldırdıktan sonra ımageUrl null geiyordu bununn için kontrol edip öyle yazdık.
   
   // ÖDEEEVV : Resim yükle deyip, resim seçilmezse (iptale basılırsa ) Kaydetme sırasında hata alınıyor. Bu hatayı giderecek çalışmayı yapıp, 15.12 saat 22.00
   // 	tarihine kadar Ödev deposuna "Mert_Korkut_Muslu_Ödev15.12.2022" şeklinde gönder.
   
   
	
JavaScriptte İnputu submit özelliği vermek yani onaylı mı butonuna tıkladığımızda onu kaydetmesi için yazılan kod -->admin-Product-Index 33-45. Satırlar
Burda UpdateIshome metodunu hazırlamak için;
1- IProductRepostiry'e git imza at -->  Task UpdateIsHomeAsync(Product product);
2- EfCoreProductRepository ' e git ve kontratın içini doldur. 
3- Web katmanında business katmanını çağırdığımız için şimdi Business katmanına git ve IProductService'de ki karşıklarını yaz.
4- ProductManagere ' e git ve içini doldur.


 
15-12------- IDENTITY-------------

Üyelik sistemi uygulamaya entegre edilecek. Satış işlemleri için.

 builder.Services.AddControllersWithViews(); Paketi DATA WEB ENTITY katmanları yüklendi
 program.cs'e gelip scop eklemeleri yapıldı.

Program.cs builder.Services.Configure<IdentityOptions> komutuyla gerrekli ayarlar verildi mesela password de mutlaka rakam olsun vb.
 
 
 WEB katmanında Controller ın içinde AcoountController oluşturuldu.
 
AccountController ' da öncelikle fieldlar tanımlandı """""Private readonly UserManager<User> _userManager"""""
													 """""private readonly SignInManager<User> _signInManager;""""  ve daha sonra dependecyInjection yapıldı.

AccountController' da Login metodu yazıldı ve post hali de kodlandı.
AccountController' da Register motedu hazrıladnı viewei eklendi.
AccountController' da Login metodunun viewei eklendi.

ASP-VALİDATİON-SUMMARY="ALL" modeldeki tüm hatalı yazar.
 
 
 
 16-12-----------
 
 builder.configuration. diyerek appseringsjson da tanımlanan port host , coneciton string gibi ifadeleri çekebilriiz. (bkz : Progra.cs 65)
 
 
 
 19-12------
 

 Identity contextte Identity pakrtinin bize verdiği Role ' e ek olarak Descpriton ekledik. 
 Bunun için düzeltmeler yaptık ; Data- Concrete-Contrxts-EfcoreIdentityCotexte gidip <User, ROLE, STİRNG> ekledik. string burda user ve rolllerin birniriler bağlantı kuracağı primary key in tipi.
								sonra program cs e gidip   builder.Services.AddIdentity<User, Role>()     buraya bizz ekstra olrak user ve role da ekleme ve değişiklik yaptık dedik. Yani Identiry paketinin bize verdiğine ek olarak.!                                                                             
	

	 cONTEXTE DEĞİŞİLİK YAPIYOLIYORSA MIGRATİONSLARI GÜNCELLE
	 dotnet ef migrations add AddRole --startup-project ../ShoppingApp.Web --context IdentityContext 
	  dotnet ef database update --startup-project ../ShoppingApp.Web --context IdentityContext
	
	
			yaptık.
 Yani Bu işlem sonucunda veri tabanında da görüleceği gibi, USerRoles tablosuna description eklendi
		



RoleEditDto oluşturudk. içine verdiğimiz bikgiler edit actionun post metodunda karşılancaklar olarak yazıldı. Yani
		        public IActionResult Edit(RoleEditDto roleEditDto) parantez içine yazdığımız bu actonun viewinde ki inputlara name olarak verdiğimiz			
						veriler. Onları karşılaması lazım olduğu için parantez içine oluşturudupumuz roleEditDto yazdık ve içine inputtaki nameleri yazdık. eşleşmiş oldular.
						






login olan adminse değişikleri kaydeebilsin
				user kaydedemesin



20-12--------------
22Wi553NT3Ch



22-12--
Asqueryable()==> "execute etmeden önce bekle kontrol yapılacak " demek 














		
 ödevler :    	//ÖDEV: Eğer hesap onaylı değilse burada kullanıcıya "Onay linki gönder" şeklinde bir buton gözüksün. Ve bu butona basıldığında tekrar onay maili yollansın.
			  
				//ÖDEV: Eğer kullanıcı adı değiştirilmişse sağ üst köşedeki username bölümünün güncellenmesini JavaScript kodları yazarak sağlayınız.
			 
			    // ÖDEV: Roller ve kullanıcılar ile ilgili silme işlemlerini tamalayın.
				
				// ÖDEV : Butonu koşula bağla.(Rol atama )
				// ÖDEV : Pasword
				
			 